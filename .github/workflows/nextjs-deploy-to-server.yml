# Sample workflow for building and deploying a Next.js site to GitHub Pages
#
# To get started with Next.js see: https://nextjs.org/docs/getting-started
#
name: Deploy Next.js site to Server

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["ci"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "rsync"
  cancel-in-progress: false

jobs:
  #Build job
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Detect package manager
        id: detect-package-manager
        run: |
          if [ -f "${{ github.workspace }}/yarn.lock" ]; then
            echo "manager=yarn" >> $GITHUB_OUTPUT
            echo "command=install" >> $GITHUB_OUTPUT
            echo "runner=yarn" >> $GITHUB_OUTPUT
            exit 0
          elif [ -f "${{ github.workspace }}/package.json" ]; then
            echo "manager=npm" >> $GITHUB_OUTPUT
            echo "command=ci" >> $GITHUB_OUTPUT
            echo "runner=npx --no-install" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "Unable to determine package manager"
            exit 1
          fi
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: ${{ steps.detect-package-manager.outputs.manager }}
      - name: Setup Pages
        uses: actions/configure-pages@v5
        with:
          # Automatically inject basePath in your Next.js configuration file and disable
          # server side image optimization (https://nextjs.org/docs/api-reference/next/image#unoptimized).
          #
          # You may remove this line if you want to manage the configuration yourself.
          static_site_generator: next
      - name: Restore cache
        uses: actions/cache@v4
        with:
          path: |
            .next/cache
          # Generate a new cache whenever packages or source files change.
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          # If source files changed but packages didn't, rebuild from a prior cache.
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-
      - name: Install dependencies
        run: ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}
      - name: Build with Next.js
        run: ${{ steps.detect-package-manager.outputs.runner }} next build
      - name: Cache node modules
        uses: actions/cache/save@v4
        id: cache
        with:
          path: ${{ github.workspace }}
          key: cache-${{ github.sha }}
      # - name: Upload artifact
      #   uses: actions/upload-pages-artifact@v3
      #   with:
      #     path: ./out
  # ssh:
  #   runs-on: ubuntu-latest
  #   # needs: build
  #   steps:
  #   # - name: Details
  #   #   run: |
  #   #     pwd
  #   - name: Add to known hosts if it does not exist
  #     run: |
  #       mkdir -p /home/runner/work/_temp/.ssh
  #       if [ ! -f "/home/runner/work/_temp/.ssh/known_hosts" ] || ! ssh-keygen -F "${{ secrets.REMOTE_HOST }}" -f "/home/runner/work/_temp/.ssh/known_hosts" >/dev/null; then
  #         ssh-keyscan -H "${{ secrets.REMOTE_HOST }}" >>"/home/runner/work/_temp/.ssh/known_hosts"
  #       fi
  #       if [ ! -f "/home/runner/work/_temp/.ssh/key" ]; then
  #         echo "${{ secrets.SSH_PRIVATE_KEY }}" >/home/runner/work/_temp/.ssh/key && chmod 600 /home/runner/work/_temp/.ssh/key
  #       fi
  #   - name: Test SSH connection
  #     run: ssh -vvv ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }} -i "/home/runner/work/_temp/.ssh/key" -o UserKnownHostsFile="/home/runner/work/_temp/.ssh/known_hosts" -T "echo 1"
  # Deployment job
  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Restore cache
        uses: actions/cache/restore@v4
        id: cache
        with:
          path: ${{ github.workspace }}
          key: cache-${{ github.sha }}
      - name: List details
        run: |
          whoami
          pwd
          ls -ltah
          ls -ltah out
      - name: Check cache hit
        if: steps.cache.outputs.cache-hit != 'true'
        run: exit 1
      - name: Install SSH Key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          known_hosts: "generated"
      - name: Adding Known Hosts
        run: ssh-keyscan -H ${{ secrets.REMOTE_HOST }} >> ~/.ssh/known_hosts
      - name: Deploy with rsync
        run: "rsync -v -e 'ssh -p 22 -v' --executability --prune-empty-dirs --recursive --links --owner --group --devices --specials --compress --verbose --checksum --delete-after --exclude '.git/' --exclude '.vscode/' --exclude '.github/' --exclude '.idea/' --include='*' --delete-excluded --out-format='Action: %o -> %n - Last Modified: %M' --omit-dir-times --stats ./out/ ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }}:/var/www/naroden.org/"
    # - name: Add to known hosts if it does not exist
    #   run: |
    #     mkdir -p /home/runner/work/_temp/.ssh
    #     if [ ! -f "/home/runner/work/_temp/.ssh/known_hosts" ] || ! ssh-keygen -F "${{ secrets.REMOTE_HOST }}" -f "/home/runner/work/_temp/.ssh/known_hosts" >/dev/null; then
    #       ssh-keyscan -H "${{ secrets.REMOTE_HOST }}" >>"/home/runner/work/_temp/.ssh/known_hosts"
    #     fi
    # - name: Deploy to Server
    #   uses: easingthemes/ssh-deploy@v5.0.3
    #   with:
    #       SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
    #       # SSH_CMD_ARGS: -o UserKnownHostsFile=/home/runner/work/_temp/.ssh/known_hosts, -o StrictHostKeyChecking=no
    #       ARGS: "--dry-run --executability --prune-empty-dirs --recursive --links --owner --group --devices --specials --compress --verbose --checksum --delete-after --delete-excluded -e 'ssh -p 22 -vvv' --out-format='Action: %o -> %n - Last Modified: %M' --omit-dir-times --stats"
    #       SOURCE: "./"
    #       REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
    #       REMOTE_USER: ${{ secrets.REMOTE_USER }}
    #       TARGET: "/var/www/naroden.org"
    #       EXCLUDE: "/.github/, /.idea/, /.git/"
    #       SCRIPT_BEFORE: |
    #         hostnamectl
    #         ssh -V
    #         whoami
    #         ls -ltah
    #       SCRIPT_AFTER: |
    #         whoami
    #         ls -al
    #         echo $RSYNC_STDOUT
    # - name: Deploy to Server
    #   uses: burnett01/rsync-deployments@7.0.1
    #   with:
    #       remote_key: ${{ secrets.SSH_PRIVATE_KEY }}
    #       # SSH_CMD_ARGS: -o UserKnownHostsFile=/home/runner/work/_temp/.ssh/known_hosts, -o StrictHostKeyChecking=no
    #       switches: "-v --dry-run --executability --prune-empty-dirs --recursive --links --owner --group --devices --specials --compress --verbose --checksum --delete-after --exclude '.git/' --exclude '.vscode/' --exclude '.github/' --exclude '.idea/' --include='*' --delete-excluded --out-format='Action: %o -> %n - Last Modified: %M' --omit-dir-times --stats"
    #       path: "./"
    #       remote_host: ${{ secrets.REMOTE_HOST }}
    #       remote_user: ${{ secrets.REMOTE_USER }}
    #       remote_path: "/var/www/naroden.org"
    #       # rsh: -p 22
